#!/bin/sh
# @(#$Id: rclkwd,v 1.2 2008-10-08 08:27:34 dockes Exp $  (C) 2004 J.F.Dockes
# Parts taken from Estraier:
#================================================================
# Estraier: a personal full-text search system
# Copyright (C) 2003-2004 Mikio Hirabayashi
#================================================================
#================================================================
# Extract text from a kword file
#================================================================

# set variables
LANG=C ; export LANG
LC_ALL=C ; export LC_ALL
progname="rclkwd"
filetype=kword


#RECFILTCOMMONCODE
##############################################################################
# !! Leave the previous line unmodified!! Code imported from the
# recfiltcommon file

# Utility code common to all shell filters. This could be sourced at run
# time, but it's slightly more efficient to include the code in the
# filters at build time (with a sed script).

# Describe error in a way that can be interpreted by our caller
senderror()
{
    echo RECFILTERROR $*
    # Also alert on stderr just in case
    echo ":2:$progname::: $*" 1>&2
    exit 1
}

iscmd()
{
    cmd=$1
    case $cmd in
    */*)
	if test -x $cmd -a ! -d $cmd ; then return 0; else return 1; fi ;;
    *)
      oldifs=$IFS; IFS=":"; set -- $PATH; IFS=$oldifs
      for d in $*;do test -x $d/$cmd -a ! -d $d/$cmd && return 0;done
      return 1 ;;
    esac
}

checkcmds()
{
    for cmd in $*;do
      if iscmd $cmd 
      then 
        a=1
      else 
        senderror HELPERNOTFOUND $cmd
      fi
    done
}

# show help message
if test $# -ne 1 -o "$1" = "--help" 
then
  echo "Convert a $filetype file to HTML text for Recoll indexing."
  echo "Usage: $progname [infile]"
  exit 1
fi

infile="$1"

# check the input file existence (may be '-' for stdin)
if test "X$infile" != X- -a ! -f "$infile"
then
  senderror INPUTNOSUCHFILE "$infile"
fi

# protect access to our temp files and directories
umask 77

##############################################################################
# !! Leave the following line unmodified !
#ENDRECFILTCOMMONCODE

checkcmds unzip gunzip tar xsltproc

# We need a temporary directory
if test z"$RECOLL_TMPDIR" != z; then
   ttdir=$RECOLL_TMPDIR
elif test z"$TMPDIR" != z ; then
   ttdir=$TMPDIR
else
   ttdir=/tmp
fi
tmpdir=$ttdir/rclkwd_tmp$$
mkdir $tmpdir || exit 1
mkdir $tmpdir/rclkwdtmp || exit 1

cleanup()
{
    # Note that we're using a constant part (rclkwdtmp), that hopefully
    # guarantees that we can't do big mistakes here.
    rm -rf $tmpdir/rclkwdtmp
    rmdir $tmpdir
}
    
trap cleanup EXIT HUP QUIT INT TERM

# Old kwd files are gzip/tar archibes. Newer ones are zip archives.
if file "$infile" | grep -qi gzip ; then
   # Unzip the input file and change to the unzipped directory
   gunzip < "$infile" | (cd $tmpdir/rclkwdtmp;tar xf -)
else
   # Unzip the input file and change to the unzipped directory
   unzip -q -d $tmpdir/rclkwdtmp "$infile"
fi
cd $tmpdir/rclkwdtmp

metafile=documentinfo.xml
contentfile=maindoc.xml

echo '<html><head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">'

if test -f $metafile ; then
  xsltproc --nonet --novalid - $metafile <<EOF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:kw="http://www.koffice.org/DTD/document-info"
  exclude-result-prefixes="kw"
  >

<xsl:output method="html" encoding="UTF-8"/>

<xsl:template match="/">
  <xsl:apply-templates select="kw:document-info|document-info"/>
</xsl:template>
<xsl:template match="/kw:document-info|/document-info">
  <xsl:apply-templates select="kw:author|author"/>
  <xsl:apply-templates select="kw:about/kw:abstract|abstract"/>
  <xsl:apply-templates select="kw:about/kw:title|title"/>
  <xsl:apply-templates select="kw:about/kw:keyword|keyword"/>
  <xsl:apply-templates select="kw:about/kw:subject|subject"/>
</xsl:template>

<xsl:template match="kw:author|author">
  <meta>
    <xsl:attribute name="name">author</xsl:attribute>
    <xsl:attribute name="content">
    <xsl:value-of select="kw:full-name|full-name"/>
    </xsl:attribute>
         </meta><xsl:text>
    </xsl:text>
</xsl:template>

<xsl:template match="kw:abstract|abstract">
  <meta>
    <xsl:attribute name="name">abtract</xsl:attribute>
    <xsl:attribute name="content">
    <xsl:value-of select="."/>
    </xsl:attribute>
         </meta><xsl:text>
    </xsl:text>
</xsl:template>

<xsl:template match="kw:keyword|kw:subject|keyword|subject">
  <meta>
    <xsl:attribute name="name">keywords</xsl:attribute>
    <xsl:attribute name="content">
    <xsl:value-of select="."/>
    </xsl:attribute>
         </meta><xsl:text>
    </xsl:text>
</xsl:template>

<xsl:template match="kw:title|title">
  <title><xsl:value-of select="."/></title><xsl:text>
    </xsl:text>
</xsl:template>

</xsl:stylesheet>

EOF
fi

echo '</head><body>'
xsltproc --nonet --novalid - $contentfile <<EOF
<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:kw="http://www.koffice.org/DTD/kword"
  exclude-result-prefixes="kw"
  >

<xsl:output method="html" encoding="UTF-8"/>

<xsl:template match="/">
  <xsl:apply-templates select="//kw:TEXT|//TEXT"/>
</xsl:template>

<xsl:template match="kw:TEXT|TEXT">
  <xsl:if test="normalize-space(.) != ''">
    <p><xsl:value-of select="."/></p><xsl:text>
    </xsl:text>
  </xsl:if>
</xsl:template>

</xsl:stylesheet>

EOF

echo '</body></html>'

cd /
# exit normally
exit 0
